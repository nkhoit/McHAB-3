
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .stab         000006cc  00000000  00000000  000001a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  2 .stabstr      00000054  00000000  00000000  00000870  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .comment      00000011  00000000  00000000  000008c4  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000008d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000330  00000000  00000000  000008fd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c5  00000000  00000000  00000c2d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000105  00000000  00000000  00000df2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000137  00000000  00000000  00000f8c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ae  00000000  00000000  000010c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00001171  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 63 00 	jmp	0xc6	; 0xc6 <__vector_18>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 83 00 	call	0x106	; 0x106 <main>
  78:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <USART_Init>:

//initializing the USART
void USART_Init( unsigned int ubrr)
{
	//Set baud rate
	UBRR0H = (unsigned char) (ubrr >> 8);
  80:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L = (unsigned char) ubrr;
  84:	80 93 c4 00 	sts	0x00C4, r24

	//Enable receiver and transmitter
	UCSR0B |= (1 << RXEN0) | (1 << TXEN0);
  88:	e1 ec       	ldi	r30, 0xC1	; 193
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	88 61       	ori	r24, 0x18	; 24
  90:	80 83       	st	Z, r24

	//Set frame format: 8data, 2stop bit
	UCSR0C = (3 << UCSZ00);
  92:	86 e0       	ldi	r24, 0x06	; 6
  94:	80 93 c2 00 	sts	0x00C2, r24

	//Enable receive complete interrupt service
	UCSR0B |= (1 << RXCIE0);
  98:	80 81       	ld	r24, Z
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	80 83       	st	Z, r24
  9e:	08 95       	ret

000000a0 <USART_tx_string>:
}

void USART_tx_string( char *data )
{
  a0:	fc 01       	movw	r30, r24
while ((*data != '\0'))
  a2:	06 c0       	rjmp	.+12     	; 0xb0 <USART_tx_string+0x10>
   {
      while (!(UCSR0A & (1 <<UDRE0)));
  a4:	90 91 c0 00 	lds	r25, 0x00C0
  a8:	95 ff       	sbrs	r25, 5
  aa:	fc cf       	rjmp	.-8      	; 0xa4 <USART_tx_string+0x4>
      UDR0 = *data;
  ac:	80 93 c6 00 	sts	0x00C6, r24
	UCSR0B |= (1 << RXCIE0);
}

void USART_tx_string( char *data )
{
while ((*data != '\0'))
  b0:	81 91       	ld	r24, Z+
  b2:	81 11       	cpse	r24, r1
  b4:	f7 cf       	rjmp	.-18     	; 0xa4 <USART_tx_string+0x4>
   {
      while (!(UCSR0A & (1 <<UDRE0)));
      UDR0 = *data;
      data++;
   }   
}
  b6:	08 95       	ret

000000b8 <USART_Transmit>:

//uart data tx function
void USART_Transmit( unsigned char data )
{
	//wait for empty transmit buffer
	while ( !( UCSR0A & (1 << UDRE0)) );
  b8:	90 91 c0 00 	lds	r25, 0x00C0
  bc:	95 ff       	sbrs	r25, 5
  be:	fc cf       	rjmp	.-8      	; 0xb8 <USART_Transmit>

	//put data into input buffer
	UDR0 = data;
  c0:	80 93 c6 00 	sts	0x00C6, r24
  c4:	08 95       	ret

000000c6 <__vector_18>:
}

//uart data rx interrupt
ISR(USART_RX_vect)	{ 
  c6:	1f 92       	push	r1
  c8:	0f 92       	push	r0
  ca:	0f b6       	in	r0, 0x3f	; 63
  cc:	0f 92       	push	r0
  ce:	11 24       	eor	r1, r1
  d0:	8f 93       	push	r24
	
	//read value into variable
	char duty_cycle = UDR0;
  d2:	80 91 c6 00 	lds	r24, 0x00C6
	OCR0A = 0;
}

//function to set the duty cycle
void PWM_dutycycle_set(uint8_t value)	{
	OCR0A = value * 2;
  d6:	88 0f       	add	r24, r24
  d8:	87 bd       	out	0x27, r24	; 39
	PWM_dutycycle_set(duty_cycle);

	//echo it back
	//USART_Transmit(duty_cycle);

   PORTB |= (1 << PB3);
  da:	2b 9a       	sbi	0x05, 3	; 5
}
  dc:	8f 91       	pop	r24
  de:	0f 90       	pop	r0
  e0:	0f be       	out	0x3f, r0	; 63
  e2:	0f 90       	pop	r0
  e4:	1f 90       	pop	r1
  e6:	18 95       	reti

000000e8 <PWM_Init>:
//this is an 8 bit timer
void PWM_Init()	{

	//overriding normal port functionality to enable timer/pwm output
	//this is for fast pwm mode, and setting it up for non-inverting mode
	TCCR0A |= (0 << COM0A0) | (1 << COM0A1);
  e8:	84 b5       	in	r24, 0x24	; 36
  ea:	80 68       	ori	r24, 0x80	; 128
  ec:	84 bd       	out	0x24, r24	; 36

	//setting waveform generation mode to fast pwm
	TCCR0A |= (1 << WGM00) | (1 << WGM01) | (0 << WGM02);
  ee:	84 b5       	in	r24, 0x24	; 36
  f0:	83 60       	ori	r24, 0x03	; 3
  f2:	84 bd       	out	0x24, r24	; 36

	//setting up clock select bits to use no prescaling, and the default
	//cpu clock source
	TCCR0B |= (1 << CS00) | (0 << CS01) | (0 << CS02);
  f4:	85 b5       	in	r24, 0x25	; 37
  f6:	81 60       	ori	r24, 0x01	; 1
  f8:	85 bd       	out	0x25, r24	; 37

	//setting pin to output
	DDRD|=(1<<PD6);
  fa:	56 9a       	sbi	0x0a, 6	; 10

	//setting temporary duty cycle to about 50% 
	//8 bit timer will allow values from 0 - 255
	OCR0A = 0;
  fc:	17 bc       	out	0x27, r1	; 39
  fe:	08 95       	ret

00000100 <PWM_dutycycle_set>:
}

//function to set the duty cycle
void PWM_dutycycle_set(uint8_t value)	{
	OCR0A = value * 2;
 100:	88 0f       	add	r24, r24
 102:	87 bd       	out	0x27, r24	; 39
 104:	08 95       	ret

00000106 <main>:
#include <avr/interrupt.h>
#include <avr/delay.h>

void main( void )
{
	DDRB |= (1 << PB3);
 106:	23 9a       	sbi	0x04, 3	; 4
	USART_Init(51); //initialize USART
 108:	83 e3       	ldi	r24, 0x33	; 51
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	0e 94 40 00 	call	0x80	; 0x80 <USART_Init>
	PWM_Init();	//initialize PWM
 110:	0e 94 74 00 	call	0xe8	; 0xe8 <PWM_Init>
	sei(); //enable global interrupts
 114:	78 94       	sei

	while (1)	{
		USART_Transmit('x');
 116:	88 e7       	ldi	r24, 0x78	; 120
 118:	90 e0       	ldi	r25, 0x00	; 0
 11a:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11e:	2f ef       	ldi	r18, 0xFF	; 255
 120:	84 e3       	ldi	r24, 0x34	; 52
 122:	9c e0       	ldi	r25, 0x0C	; 12
 124:	21 50       	subi	r18, 0x01	; 1
 126:	80 40       	sbci	r24, 0x00	; 0
 128:	90 40       	sbci	r25, 0x00	; 0
 12a:	e1 f7       	brne	.-8      	; 0x124 <main+0x1e>
 12c:	00 c0       	rjmp	.+0      	; 0x12e <main+0x28>
 12e:	00 00       	nop
		_delay_ms(500);
		USART_Transmit('t');
 130:	84 e7       	ldi	r24, 0x74	; 116
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART_Transmit>
 138:	2f ef       	ldi	r18, 0xFF	; 255
 13a:	84 e3       	ldi	r24, 0x34	; 52
 13c:	9c e0       	ldi	r25, 0x0C	; 12
 13e:	21 50       	subi	r18, 0x01	; 1
 140:	80 40       	sbci	r24, 0x00	; 0
 142:	90 40       	sbci	r25, 0x00	; 0
 144:	e1 f7       	brne	.-8      	; 0x13e <main+0x38>
 146:	00 c0       	rjmp	.+0      	; 0x148 <main+0x42>
 148:	00 00       	nop
 14a:	e5 cf       	rjmp	.-54     	; 0x116 <main+0x10>

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
